import Metashape
import os
import cv2

def deactivate_far_away_cameras(chunk, overlap, distance_threshold, use_selection):
    """
    Deactivates cameras that are far away from the average tie point based on the specified distance threshold.

    Parameters:
    - chunk: Metashape.Chunk
        The chunk containing the cameras and tie points.
    - overlap: float
        The desired overlap value for camera reduction.
    - distance_threshold: float
        The threshold distance for deactivating cameras.
    """
    # Get the coordinates of tie points
    tie_points = chunk.tie_points.points
    tie_point_coords = [tp.coord[:3] for tp in tie_points]

    # Calculate the average tie point
    average_tie_point = sum(tie_point_coords, Metashape.Vector([0, 0, 0])) / len(tie_point_coords)

    def euclidean_distance(point1, point2):
        return ((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2 + (point1[2] - point2[2])**2)**0.5

    # Iterate through cameras and check distance from the average tie point
    far_away_cameras = []
    for camera in chunk.cameras:
        camera_coord = camera.center
        if camera_coord is not None:
            distance_to_average = euclidean_distance(camera_coord, average_tie_point)
            far_away_cameras.append((camera, distance_to_average))

    # Calculate the average distance from cameras to the average tie point
    average_distance = sum(distance for _, distance in far_away_cameras) / len(far_away_cameras)

    # Set the threshold as the average distance
    threshold_distance = average_distance

    # Deactivate (disable) cameras that are far away
    for camera, distance_to_average in far_away_cameras:
        if distance_to_average > threshold_distance * distance_threshold:
            camera.enabled = False

    # Reduce overlap
    chunk.reduceOverlap(overlap=overlap, use_selection = use_selection)
    for camera in chunk.cameras:
        if camera.enabled:
            camera.selected = True
            print(f"Selected active camera: {camera.label}")
    print("Far away cameras deactivated.")
    print(f"Overlap reduced to {overlap}%.")

def crop_and_copy_middle_third(chunk, target_folder):
    """
    Crops the middle third of each image in terms of width and height and copies it to the specified target folder using OpenCV.

    Parameters:
    - chunk: Metashape.Chunk
        The chunk containing the images to be processed.
    - target_folder: str
        The path to the target folder where cropped images will be copied.
    """
    if not os.path.exists(target_folder):
        os.makedirs(target_folder)

    for camera in chunk.cameras:
        if camera.selected:
            image_path = camera.photo.path
            image_name = os.path.basename(image_path)
            target_path = os.path.join(target_folder, image_name)

            # Read the image using OpenCV
            image = cv2.imread(image_path)

            # Get image dimensions
            height, width, _ = image.shape

            # Calculate the cropping dimensions for the middle third of the width
            crop_width = width // 3
            left = (width - crop_width) // 2
            right = (width + crop_width) // 2

            # Calculate the cropping dimensions for the middle third of the height
            crop_height = height // 3
            top = (height - crop_height) // 2
            bottom = (height + crop_height) // 2

            # Crop the middle third of both width and height
            cropped_image = image[top:bottom, left:right]

            # Save the cropped image to the target folder
            cv2.imwrite(target_path, cropped_image)

            print(f"Cropped and copied middle third of width and height from {image_name} to {target_folder}")

def process_chunk():
    # Get the active chunk
    chunk = Metashape.app.document.chunk

    # Get user inputs
    target_folder = Metashape.app.getString("Specify the target folder for cropped images:")
    overlap = Metashape.app.getFloat("Specify the desired overlap percentage for camera reduction:", 1.0)
    use_selection = Metashape.app.getString("Use selection for overlap reduction: True or False:", "True")
    distance_threshold = Metashape.app.getFloat("Specify the distance threshold for deactivating cameras (multiplier):", 1.5)

    # Call the function to deactivate far away cameras
    deactivate_far_away_cameras(chunk, overlap, distance_threshold, use_selection)

    # Call the function to crop and copy the middle third of each image
    crop_and_copy_middle_third(chunk, target_folder)

# Call the function to process the active chunk
Metashape.app.addMenuItem("BenthicFriend/GetImagesForLabeling", process_chunk)
